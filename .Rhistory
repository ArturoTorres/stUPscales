y.exp50 <- do.call(rbind, y.exp50)
cv.exp50   <- apply(y.exp50, 1, function(x) sd(x)/mean(x))
#' Computing Table 1
# var.J1 <- Jack.var(x=X[,1], theta=mean)
var.J1.nor <- Jack.var(x=y.nor, theta=mean)
#' Population n = 20
n     <- 20
y.nor <- lapply(1:N, function(x) rnorm(n , mean = 2, sd = 1))
y.nor <- do.call(rbind, y.nor)
cv.nor   <- apply(y.nor, 1, function(x) sd(x)/mean(x))
y.gam <- lapply(1:N, function(x) rgamma(n, shape = 2, rate = 1))
y.gam <- do.call(rbind, y.gam)
cv.gam   <- apply(y.gam, 1, function(x) sd(x)/mean(x))
y.exp <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
#' Population n = 50
n     <- 50
y.nor50 <- lapply(1:N, function(x) rnorm(n , mean = 2, sd = 1))
y.nor50 <- do.call(rbind, y.nor50)
cv.nor50   <- apply(y.nor50, 1, function(x) sd(x)/mean(x))
y.gam50 <- lapply(1:N, function(x) rgamma(n, shape = 2, rate = 1))
y.gam50 <- do.call(rbind, y.gam50)
cv.gam50   <- apply(y.gam50, 1, function(x) sd(x)/mean(x))
y.exp50 <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp50 <- do.call(rbind, y.exp50)
cv.exp50   <- apply(y.exp50, 1, function(x) sd(x)/mean(x))
#' Computing Table 1
# var.J1 <- Jack.var(x=X[,1], theta=mean)
var.J1.nor <- Jack.var(x=y.nor, theta=mean)
0.5 - var.J1.nor
var.J1.gam <- Jack.var(x=y.gam, theta=mean)
var.J1.exp <- Jack.var(x=y.exp, theta=mean)
#' Computing Table 1
# var.J1 <- Jack.var(x=X[,1], theta=mean)
var.J1.nor <- Jack.var(x=cv.nor, theta=mean)
var.J1.gam <- Jack.var(x=cv.gam, theta=mean)
var.J1.exp <- Jack.var(x=cv.exp, theta=mean)
0.5 - var.J1.nor
0.5 - var.J1.gam
0.5 - var.J1.exp
var.J1.nor^.5
0.5 - var.J1.nor^.5
var.J1.nor^.5
round(var.J1.nor^.5, 3)
round(var.J1.gam^.5, 3)
round(var.J1.exp^.5, 3)
var.J1.nor.boot <- Boot.var(x=cv.nor, B=1000, theta=mean)
var.J1.nor.boot <- Boot.var(x=cv.nor, B=1000, theta=mean)
var.J1.gam.boot <- Boot.var(x=cv.gam, B=1000, theta=mean)
var.J1.exp.boot <- Boot.var(x=cv.exp, B=1000, theta=mean)
0.5 - var.J1.nor.boot
(var.J1.nor.boot)^.5
round(var.J1.nor.boot, 3)
round(var.J1.nor.boot, 5)
round(var.J1.nor.boot, 6)
var.J1.nor50 <- Jack.var(x=cv.nor50, theta=mean)
var.J1.gam50 <- Jack.var(x=cv.gam50, theta=mean)
var.J1.exp50 <- Jack.var(x=cv.exp50, theta=mean)
J1.1
J1.1 <- round(var.J1.nor^.5, 3)
J1.2 <- round(var.J1.gam^.5, 3)
J1.3 <- round(var.J1.exp^.5, 3)
J1.1
J1.2
J1.3
J1.1 <- round(var.J1.nor^.5, 3)
J1.2 <- round(var.J1.gam^.5, 3)
J1.3 <- round(var.J1.exp^.5, 3)
J1.4 <- round(var.J1.nor50^.5, 3)
J1.5 <- round(var.J1.gam50^.5, 3)
J1.6 <- round(var.J1.exp50^.5, 3)
J1.7 <- mean(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6)
J1.7
J1.7check <- mean(.002, -.013, -.029, .001, -.006, -.012)
J1.7check
J1.7check <- (mean(.002, -.013, -.029, .001, -.006, -.012))^.5
J1.7check
J1.7check <- (mean(.002, -.013, -.029, .001, -.006, -.012))^2
J1.7check
J1.7check <- mean(.002, -.013, -.029, .001, -.006, -.012)
J1.7check <- mean(.002^.5, -.013^.5, -.029^.5, .001^.5, -.006^.5, -.012^.5)
J1.7check^.5
J1.7check^2
J1.7 <- mean(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6)
J1.7
ybar  <- mean(seed, sprig, combo)
ybar  <- mean(c(seed, sprig, combo))
ybar  <- c(mean(seed), mean(sprig), mean(combo))
sd    <- c(sd(seed), sd(sprig), sd(combo))
cv    <- sd/ybar
cv    <- sd/ybar # c(1.38, 0.54, 0.86)
Jack.var(x = seed, theta = CV)^.5
Jack.var(x = seed, theta = CV)^.5 # 0.34
Jack.var(x = sprig, theta = CV)^.5 # 0.16
Jack.var(x = combo, theta = CV)^.5 # 0.24
#' Standard errors
Jack.var(x = seed, theta = CV)^.5 # 0.34
Jack.var(x = sprig, theta = CV)^.5 # 0.16
Jack.var(x = combo, theta = CV)^.5 # 0.24
#' Computing average SE_MC
cv.J1.nor <- Jack.var(x=cv.nor, theta=CV)
cv.J1.gam <- Jack.var(x=cv.gam, theta=CV)
cv.J1.exp <- Jack.var(x=cv.exp, theta=CV)
cv.J1.nor50 <- Jack.var(x=cv.nor50, theta=CV)
cv.J1.gam50 <- Jack.var(x=cv.gam50, theta=CV)
cv.J1.exp50 <- Jack.var(x=cv.exp50, theta=CV)
J1.1.se <- round(cv.J1.nor^.5, 3)
J1.2.se <- round(cv.J1.gam^.5, 3)
J1.3.se <- round(cv.J1.exp^.5, 3)
J1.4.se <- round(cv.J1.nor50^.5, 3)
J1.5.se <- round(cv.J1.gam50^.5, 3)
J1.6.se <- round(cv.J1.exp50^.5, 3)
J1.7.se <- mean(J1.1.se, J1.2.se, J1.3.se, J1.4.se, J1.5.se, J1.6.se)
J1.7.se.check <- mean(.002^.5, -.013^.5, -.029^.5, .001^.5, -.006^.5, -.012^.5)
J1.7.se.check
J1.7.se <- mean(J1.1.se, J1.2.se, J1.3.se, J1.4.se, J1.5.se, J1.6.se) # .001
Jack.var(x = c(J1.1.se, J1.2.se, J1.3.se, J1.4.se, J1.5.se, J1.6.se), theta = CV)^.5 # 0.001
Jack.var(x = c(J1.1.se, J1.2.se, J1.3.se, J1.4.se, J1.5.se, J1.6.se), theta = CV) # 0.001
Jack.var(x = c(J1.1.se, J1.2.se, J1.3.se, J1.4.se, J1.5.se, J1.6.se), theta = CV)^.5 # 0.001
Jack.var(x = c(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6), theta = CV)^.5 # 0.001
Jack.var(x = c(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6), theta = CV) # 0.001
Jack.var(x = c(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6), theta = CV)^.5 # 0.001
Jack.var(x = c(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6), theta = mean)^.5 # 0.001
Jack.var(x = c(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6), theta = mean) # 0.001
Jack.var(x = c(J1.1, J1.2, J1.3, J1.4, J1.5, J1.6), theta = mean)^.5 # 0.001
rnorm(n = 15)
rnorm(n = 15e10)
rnorm(n = 15e6)
n1_0 <- rnorm(n = 15e6)
mean(n1_0)
n0_1 <- rnorm(n = 15e6)
mean(n0_1)
var(n0_1)
1^.5
y.exp <- rexp(n = 10)
# ====================================================================================================
# Jackknife and bootstrap standard errors
# ====================================================================================================
#' Replicating table 11.3 (page 423) from Boos and Stefanski (2013). "Essential Statistical Inference:
#' Theory and Methods". Springer.
N <- 10E3
y.exp10    <- lapply(1:N, function(x) rexp(n, rate = 1))
# ====================================================================================================
# Jackknife and bootstrap standard errors
# ====================================================================================================
#' Replicating table 11.3 (page 423) from Boos and Stefanski (2013). "Essential Statistical Inference:
#' Theory and Methods". Springer.
N <- 10E3
n <- 10
y.exp10    <- lapply(1:N, function(x) rexp(n, rate = 1))
# ====================================================================================================
# Jackknife and bootstrap standard errors
# ====================================================================================================
#' Replicating table 11.3 (page 423) from Boos and Stefanski (2013). "Essential Statistical Inference:
#' Theory and Methods". Springer.
N <- 10E3
n <- 10
y.exp10    <- lapply(1:N, function(x) rexp(n, rate = 1))
My.mc.cv.exp < function(N, n){
y.exp    <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp    <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
}
My.mc.cv.exp(10E3, 10)
My.mc.cv.exp < function(N, n){
y.exp    <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp    <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
}
My.mc.cv.exp(10E3, 10)
My.mc.cv.exp <- function(N, n){
y.exp    <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp    <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
}
My.mc.cv.exp(10E3, 10)
My.mc.cv.exp(N = 10E3, n = 10)
My.mc.cv.exp <- function(N, n){
y.exp    <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp    <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
return(cv.exp)
}
My.mc.cv.exp(N = 10E3, n = 10)
mean(My.mc.cv.exp(N = 10E3, n = 10))
CV <- function(x){
sd(x)/mean(x)
}
Skew <- function(x){mean((x-mean(x))^3)/(mean((x-mean(x))^2)^(1.5))}
Kurt <- function(x){mean((x-mean(x))^4)/(mean((x-mean(x))^2)^2)}
Jack.var <- function(x, theta, ...){
n <- length(x)
u <- rep(0, n)
for(i in 1:n) {
u[i] <- theta(x[ -i], ...)  # leave-1-out estimators
}
jack.var <- ((n - 1)/n) * sum((u - mean(u))^2)
return(jack.var)
}
Boot.var <- function(x, B, theta, ...){
n         <- length(x)
bootsam   <- matrix(sample(x, size = n*B, replace=TRUE), nrow = B, ncol = n)
thetastar <- apply(bootsam, 1, theta, ...)
boot.var  <- var(thetastar)
return(boot.var)
}
cv.exp <- mean(My.mc.cv.exp(N = 10E3, n = 10))
Jack.var(x = cv.exp, theta = mean)
cv.exp <- My.mc.cv.exp(N = 10E3, n = 10)
Jack.var(x = cv.exp, theta = mean)
Jack.var(x = cv.exp, theta = CV)
#' Replicating table 1 from Boos and Osborne (2015). "Assessing Variability of Complex Descriptive
#' Statistics in Monte Carlo Studies using Resampling Methods".
#' Int Stat Rev. 2015 August ; 83(2): 228â€“238. doi:10.1111/insr.12087.
set.seed(123)
N     <- 4000
#' Population n = 20
n     <- 20
n0_1 <- rnorm(n = 15e6)
mean(n0_1)
var(n0_1)
1^.5
y.nor <- lapply(1:N, function(x) rnorm(n , mean = 2, sd = 1^.5))
y.nor <- do.call(rbind, y.nor)
cv.nor   <- apply(y.nor, 1, function(x) sd(x)/mean(x))
y.gam <- lapply(1:N, function(x) rgamma(n, shape = 2, rate = 1))
y.gam <- do.call(rbind, y.gam)
cv.gam   <- apply(y.gam, 1, function(x) sd(x)/mean(x))
y.exp <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
#' Population n = 50
n     <- 50
y.nor50 <- lapply(1:N, function(x) rnorm(n , mean = 2, sd = 1))
y.nor50 <- do.call(rbind, y.nor50)
cv.nor50   <- apply(y.nor50, 1, function(x) sd(x)/mean(x))
y.gam50 <- lapply(1:N, function(x) rgamma(n, shape = 2, rate = 1))
y.gam50 <- do.call(rbind, y.gam50)
cv.gam50   <- apply(y.gam50, 1, function(x) sd(x)/mean(x))
y.exp50 <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp50 <- do.call(rbind, y.exp50)
cv.exp50   <- apply(y.exp50, 1, function(x) sd(x)/mean(x))
#' Computing Table 1 (Jackknife re-sampling)
# var.J1 <- Jack.var(x=X[,1], theta=mean)
var.J1.nor <- Jack.var(x=cv.nor, theta=mean)
var.J1.gam <- Jack.var(x=cv.gam, theta=mean)
var.J1.exp <- Jack.var(x=cv.exp, theta=mean)
# ====================================================================================================
# Jackknife standard errors
# ====================================================================================================
seed  <- c(1, 2, 79, 5, 17, 11, 2, 15, 85)
sprig <- c(37, 60, 48, 14, 76, 23)
combo <- c(3, 61, 7, 5, 27, 25, 35, 17)
ybar  <- c(mean(seed), mean(sprig), mean(combo))
sd    <- c(sd(seed), sd(sprig), sd(combo))
#' Sample coefficient of variation
cv    <- sd/ybar # c(1.38, 0.54, 0.86)
#' Standard errors (SE)
Jack.var(x = seed, theta = CV)^.5 # 0.34
Jack.var(x = sprig, theta = CV)^.5 # 0.16
Jack.var(x = combo, theta = CV)^.5 # 0.24
N     <- 4000
#' Population n = 20
n     <- 20
y.exp <- lapply(1:N, function(x) rexp(n, rate = 1))
y.exp <- do.call(rbind, y.exp)
cv.exp   <- apply(y.exp, 1, function(x) sd(x)/mean(x))
mean(cv.exp)
mean(cv.exp) -.5
mean(cv.exp)^.5
mean(cv.exp)^2
jack.se<-function(x, t
jack.se<-function(x, theta, ...){
call <- match.call()
n <- length(x)
u <- rep(0, n)
for(i in 1:n) {u[i] <- theta(x[ - i], ...)}
jack.se <- sqrt(((n - 1)/n) * sum((u - mean(u))
Ë†2))
return(jack.se)
}
jack.se<-function(x, theta, ...){
call <- match.call()
n <- length(x)
u <- rep(0, n)
for(i in 1:n) {u[i] <- theta(x[ - i], ...)}
jack.se <- sqrt(((n - 1)/n) * sum((u - mean(u))Ë†2))
return(jack.se)
}
Jack.se <- function(x, theta, ...){
call <- match.call()
n <- length(x)
u <- rep(0, n)
for(i in 1:n) {u[i] <- theta(x[ - i], ...)}
jack.se <- sqrt(((n - 1)/n) * sum((u - mean(u))Ë†2))
return(jack.se)
}
Jack.se <- function(x, theta, ...){
call <- match.call()
n <- length(x)
u <- rep(0, n)
for(i in 1:n) {u[i] <- theta(x[ - i], ...)}
jack.se <- sqrt(((n - 1)/n) * sum((u - mean(u))Ë†2))
return(jack.se)
}
call <- match.call()
n <- length(x)
Jack.se <- function(x, theta, ...){
call <- match.call()
n <- length(x)
u <- rep(0, n)
for(i in 1:n) {u[i] <- theta(x[ - i], ...)}
jack.se <- sqrt(((n - 1)/n) * sum((u - mean(u))^2))
return(jack.se)
}
# ====================================================================================================
# Jackknife standard errors
# ====================================================================================================
library(boot)
library(Monte.Carlo.se)
library(bootstrap)
library(bootstrap)
citation(gstat)
citation('gstat')
library(rgdal)
library(raster)
# Create a raster
ras <- raster(ncols=36, nrows=18)
ras[] <- runif(ncell(ras))
# Create a SpatialPoints object
shpPts <- spsample(Spatial(bbox=bbox(ras)), 20, type="random")
# Create a SpatialPolygons object
p1 <- rbind(c(-10,0), c(140,60), c(160,0), c(140,-55), c(-10,0))
shpPolys <- SpatialPolygons( list(Polygons(list(Polygon(p1)), 1)))
# Plot them, one layer after another
plot(ras)
plot(shpPts, pch=16, col="red", add=TRUE)
plot(shpPolys, col=NULL, add=TRUE)
library(vineyard)
data("data_remich")
region <- data_remich@sp
plot(region)
my_region <- data_remich@sp
plot(my_region)
my_region_bbox <- data_remich@sp@bbox
my_region_bbox
my_region_bbox <- data_remich@sp
spplot(my_region)
library(sp)
spplot(my_region)
my_region <- data_remich@sp
spplot(my_region)
my_region <- data_remich
spplot(my_region)
stplot(my_region, mode="ts")
#' Setup
#'--------------------------------------------------------------------------------------------------
#+ setup, echo=TRUE, eval=TRUE, include=TRUE, warning=FALSE
library(knitr)
library(EOTSA)
library(stUPscales)
library(vineyard)
#' Setup
#'--------------------------------------------------------------------------------------------------
#+ setup, echo=TRUE, eval=TRUE, include=TRUE, warning=FALSE
library(knitr)
library(EOTSA)
#+ setup, echo=TRUE, eval=TRUE, include=TRUE, warning=FALSE
library(knitr)
library(EOTSA)
library(stUPscales)
library(vineyard)
(time.ini <- Sys.time())
# config
runLocal <- TRUE
# # PROBAV_smpl
# startdate <- "2015-01-01"
# enddate <-"2018-05-01"
# bbox <- "4, 4.05, 51.95, 52" # bounding box for sample region
#' Setup (loaded from tif files)
#'--------------------------------------------------------------------------------------------------
# PROBAV_smpl (loaded from tif files)
# startdate <- "2016-01-11"
# enddate <-"2017-05-31"
# bbox <- "4, 4.05, 51.95, 52" # bounding box for sample region
#' Setup for entire Luxembourg (loaded from tif files)
#'--------------------------------------------------------------------------------------------------
#' Extend for entire Luxembourg
#' $$c(E 5Â°40'00"--E 6Â°33'00"/N 50Â°12'00"--N 49Â°25'00")
# bbox <- "5.7, 6.6, 49.4, 50.2" # bounding box
#' Setup for Grevenmacher District in Luxembourg (loaded from tif files)
#'--------------------------------------------------------------------------------------------------
#' Extend for Grevenmacher District (Luxembourg)
#' Setup
#'--------------------------------------------------------------------------------------------------
#+ setup, echo=TRUE, eval=TRUE, include=TRUE, warning=FALSE
library(knitr)
library(EOTSA)
library(stUPscales)
library(EOTSA)
library(rgdal)
library(raster)
library(vineyard)
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455")
my_region <- spTransform(my_region, CRS("+init=epsg:4326")) # WGS 84
# create bounding polygon
(bbox <- my_region@bbox)
xdist <- bbox[1,2] - bbox[1,1]
(xdist <- bbox[1,2] - bbox[1,1])
(ydist <- bbox[2,2] - bbox[2,1])
bbox <- bbox - .11
bbox
# create bounding polygon
(bbox <- my_region@bbox)
bbox <- bbox + .11
bbox
(xdist <- bbox[1,2] - bbox[1,1])
# create bounding polygon
(bbox <- my_region@bbox)
(xdist <- bbox[1,2] - bbox[1,1])
(ydist <- bbox[2,2] - bbox[2,1])
bbox1 <- bbox + .11
bbox1
bbox1 <- bbox + .22
bbox1
bbox
my_region1 <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455")
my_region1 <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
my_region1 <- spTransform(my_region1, CRS("+init=epsg:4326")) # WGS 84
plot(my_region)
plot(my_region1, add=TRUE)
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
my_region <- spTransform(my_region1, CRS("+init=epsg:4326")) # WGS 84
my_region <- spTransform(my_region, CRS("+init=epsg:4326")) # WGS 84
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
my_region <- spTransform(my_region, CRS("+init=epsg:4326")) # WGS 84
save(my_region, file = "Brazil_deforestation_GEA455_smaller.RData")
library(OpenStreetMap)
library(OpenStreetMap)
library(rgdal)
library(raster)
library(vineyard)
library(OpenStreetMap)
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
my_region <- spTransform(my_region, CRS("+init=epsg:4326")) # WGS 84
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455")
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
library(rgdal)
library(raster)
library(vineyard)
library(OpenStreetMap)
my_region <- readOGR(dsn = "/home/torres_30400/Documents/02_working_post-doc/3-Production/05_models/03_EOTSA/gis/my_general", layer="Brasil_deforestation_GEA455_smaller")
# create bounding polygon
(bbox <- my_region@bbox)
map_osm <- openmap(c(bbox[2,1],bbox[1,1]), c(bbox[2,2],bbox[1,2]), type = 'osm') # openstreetmap epsg:3857
map_osm <- openproj(map_osm, projection = CRS("+init=epsg:4326"))  # WGS 84
map_bing <- openmap(c(bbox[2,1],bbox[1,1]), c(bbox[2,2],bbox[1,2]), type = 'bing')
map_bing <- openproj(map_bing, projection = CRS("+init=epsg:4326"))  # WGS 84
plot(my_region)
plot(map_bing,add=TRUE)
# locate 4 points
p4 <- locate()
# locate 4 points
p4 <- locator()
p4
##---------------------------------------------------------------------
## user's configuration (III)
##---------------------------------------------------------------------
## working directory
wdir <-  "~/Documents/02_working/3-Production/05_IV-Year/05_models/01_stUPscales/stUPscales/"
## commit label
commit.label <- 'added Create.grid.R file for Create.grid function'
## Gitlab repository
username   <- "Arturo.Torres"
password   <- "sehajsamadhi1A"
repository <- "git.list.lu/geocomputation/quics/stUPscales.git"
credential <- paste0("https://", username, ":", password, "@", repository)
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## commit label
commit.label <- 'added Create.grid.R file and CITATION file'
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
## find and write big files in .gitignore
system("find . -size +50M | cat >> .gitignore")
## to stage files
system("git add .")
## to commit changes with label
system(paste0("git commit -a -m '", commit.label, "'"))
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
##---------------------------------------------------------------------
## configuring remote.origin.url for Github repository and pushing
##---------------------------------------------------------------------
system(paste0("git config remote.origin.url ", credential))
system(paste0("git push ", credential, " master"))
