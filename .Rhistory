dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
#' Alternatively we can incorporate the animation directly into a pdfâ€”though for
#' this to work we need to work with LaTeX and use the LaTeX animate-package.
m = 0.25
ny = nx = 30
# generate coordinates
xy = expand.grid(x = 1:nx, y = 1:ny)
require("animation")
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
#' The S and I matrices will hold the results from the simulation. We will run the
#' model for IT=520 iterations (= 20 years). Assume that all patches have S0 =
#' 100 susceptibles and that 1 infected is introduced in location {400, 1}:
IT = 520
S = I = matrix(NA, nrow = ny * nx, ncol = IT)
S[, 1] = 100
I[, 1] = 0
I[400, 1] = 1
require("animation")
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
seq_len(ani.options("nmax")
)
i = 1
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
test.function(xy=xy, I=I, nmax=50)
oopt = ani.options(interval = 0.02, nmax = 100)
test.function = function (xy, I, nmax) {
x = xy[,1]
y = xy[,2]
scIcubed = I^(1/4)/(max(I[,10:IT]^(1/4)))
for (i in seq_len(ani.options("nmax"))) {
dev.hold()
symbols(x,y,fg=2,circles=I[,i],inches=0.1,bg=2,
xlab="",ylab="")
ani.pause()
}
}
saveLatex({
test.function(xy=xy, I=I, nmax=50)
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
brownian.motion()
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/texbin/pdflatex",
img.name = "Xplot")
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/bin/pdflatex",
img.name = "Xplot")
oopt = ani.options(interval = 0.02, nmax = 120)
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/bin/pdflatex",
img.name = "Xplot")
saveLatex({
brownian.motion()
},
ani.basename = "BM", ani.opts = "controls,loop,
width=0.8\\textwidth", ani.first =
par(mar = c(3, 3, 1, 0.5), mgp = c(2, 0.5, 0),
tcl = -0.3, cex.axis = 0.8, cex.lab = 0.8,
cex.main = 1), latex.filename = "test_animation.tex",
pdflatex = "/usr/bin/pdflatex",
img.name = "Xplot")
rm(list = ls())
data <- structure(list(Time = 1:7,
A = c(33046, 970250, 1870125, 259625, 3838750, 962333, 2272917),
B = c(196, 578, 323, 509, 215, 5437, 41028),
C = c(0.81, 0.94, 2.31, 12.2, 11.5, 4.7, 10.1)),
row.names = c(NA, -7L),
class = c("tbl_df", "tbl", "data.frame"))
opar <- par(mar = c(5,4,4,4) + 0.1)
plot(data$Time, data$A, type = "l",  xlim = NULL, ylim = c(100,10000000),
log = "y", main = "Title", xlab = "Time", ylab = "copies", col= "blue")
par(new = TRUE)
plot(data$Time, data$B, type = "l",  xlim = NULL, ylim = c(100,10000000),
log = "y", main = "", xlab = "", ylab = "", col= "green")
par(new = TRUE)
plot(data$C, type = "l", xaxt = "n", yaxt = "n",
ylab = "", xlab = "", col = "red", lty = 2, )
axis(side = 4)
mtext("secondary axis", side = 4, line = 3, col="red")
legend("topleft", c("A", "B", "C"),
col = c("blue", "green", "red"), lty = c(1, 1, 2))
par(opar)
plot(data$Time, data$A, type = "l",  xlim = NULL, ylim = c(100,10000000),
log = "y", main = "Title", xlab = "Time", ylab = "copies", col= "blue")
require(quantmod)
getQuote("QQQQ;SPY", what=yahooQF("Last Trade (Price Only)"))
getSymbols()
library(BatchGetSymbols)
first.date <- Sys.Date()-60
last.date <- Sys.Date()
df.SP500 <- GetSP500Stocks()
tickers <- df.SP500$Tickers
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date)
print(l.out$df.control)
print(l.out$df.tickers)
# footsie
df.FTSE100 <- GetFTSE100Stocks()
print(df.FTSE100$tickers)
tickers.ftse100 <- df.FTSE100$Tickers
print(tickers.ftse100)
tickers.ftse100 <- df.FTSE100$Tickers
print(tickers.ftse100)
df.FTSE100 <- GetFTSE100Stocks()
tickers.ftse100 <- df.FTSE100$Tickers
print(tickers.ftse100)
print(df.FTSE100$tickers)
df.FTSE100 <- GetFTSE100Stocks()
tickers.ftse100 <- df.FTSE100$Tickers
print(df.FTSE100$tickers)
tickers.ftse100 <- print(df.FTSE100$Tickers)
print(df.FTSE100$tickers)
tickers.ftse100 <- print(df.FTSE100$tickers)
tickers.ftse100 <- df.FTSE100$tickers
print(tickers.ftse100)
tickers.ftse <- df.FTSE100$tickers
print(tickers.ftse)
l.out.ftse <- BatchGetSymbols(tickers = tickers.ftse,
first.date = first.date,
last.date = last.date)
print(l.out.ftse$df.control)
print(l.out.ftse$df.tickers)
print(tickers.ftse)
getQuote("QQQQ;SPY", what=yahooQF("Last Trade (Price Only)"))
require(quantmod)
getQuote("QQQQ;SPY", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III", what=yahooQF("Last Trade (Price Only)"))
getQuote("III")
library(lattice)
# Works to set symbol size, but needs additional work to give text etc.
xyplot(Sepal.Length + Sepal.Width ~ Petal.Length + Petal.Width | Species,
data = iris, scales = "free", layout = c(2, 2),
key = list(points=list(cex=2.5,pch=c(13,3,16)),x = .6, y = .7, corner = c(0, 0)))
# Fails
xyplot(Sepal.Length + Sepal.Width ~ Petal.Length + Petal.Width | Species,
data = iris, scales = "free", layout = c(2, 2),
auto.key = list(points=list(cex=2.5,pch=c(13,3,16)),
x = .6, y = .7, corner = c(0, 0)))
xyplot(Sepal.Length + Sepal.Width ~ Petal.Length + Petal.Width | Species,
data = iris, scales = "free", layout = c(2, 2), cex=1,
par.settings = simpleTheme(col=c("blue","red"),
pch=c(13,3,16), cex=3, lwd=2),
auto.key = list(points=TRUE,text=c("","",""),
x = .6, y = .7, corner = c(0, 0)) )
#############################
## Example: Meuse data set ##
#############################
library(sp)
library(gstat)
data("meuse")
meuse
coordinates(meuse) <- ~x+y
meuse
data("meuse.grid")
meuse.grid
coordinates(meuse.grid) <- ~x+y
gridded(meuse.grid) <- TRUE
meuse.grid
separableModel <- vgmST("separable",
space=vgm(0.85,"Exp", 831, 0.15),
time =vgm(0.9,"Exp", 3.25, 0.1),
sill=135000)
attr(separableModel,"temporal unit") <- "days"
library(spacetime)
stf <- STF(meuse, Sys.time()-20:0*24*3600)
stf_grid <- STF(geometry(meuse.grid), stf@time)
#'---------------------------------------------------------------
#' Accessing by MODIS package
#'---------------------------------------------------------------
library(MODIS)
#'---------------------------------------------------------------
#' Accessing by MODIStsp package
#'---------------------------------------------------------------
library(MODIStsp)
MODIStsp()
MODIStsp()
#'---------------------------------------------------------------
#' Accessing by MODIStsp package
#'---------------------------------------------------------------
library(MODIStsp)
MODIStsp()
MODIStsp()
MODIStsp()
MODIStsp()
setwd("~/Documents/02_working/3-Production/05_IV-Year/05_models/01_stUPscales/stUPscales/R")
load("~/Documents/02_working/3-Production/05_IV-Year/05_models/01_stUPscales/stUPscales/data/Goe_catchment.rda")
promptData(Goe_catchment)
##---------------------------------------------------------------------
## user's configuration (III)
##---------------------------------------------------------------------
## working directory
wdir <-  "~/Documents/02_working/3-Production/05_IV-Year/05_models/01_stUPscales/stUPscales/"
## commit label
commit.label <- 'created Goe_catchment dataset'
## Gitlab repository
username   <- "Arturo.Torres"
password   <- "sehajsamadhi1A"
repository <- "git.list.lu/geocomputation/quics/stUPscales.git"
credential <- paste0("https://", username, ":", password, "@", repository)
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
## find and write big files in .gitignore
system("find . -size +50M | cat >> .gitignore")
## to stage files
system("git add .")
## to commit changes with label
system(paste0("git commit -a -m '", commit.label, "'"))
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
##---------------------------------------------------------------------
## configuring remote.origin.url for Github repository and pushing
##---------------------------------------------------------------------
system(paste0("git config remote.origin.url ", credential))
system(paste0("git push ", credential, " master"))
library(stUPscales)
rm(list=ls())
library(stUPscales)
data("Goe_catchment")
data("HS_RW20111216_stfdf")
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
STFDF.crop <- function(stfdf, sp.polygons){
dat_raster   <-as(dat_stfdf, "RasterBrick")
dat_raster@z <- list(index(dat_stfdf@time))
dat_stfdf    <- as(crop(x = dat_raster, y = sp.polygons), "STFDF")
return(dat_stfdf)
}
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
STFDF.crop <- function(stfdf, sp.polygons){
dat_raster   <-as(stfdf, "RasterBrick")
dat_raster@z <- list(index(stfdf@time))
dat_stfdf    <- as(crop(x = dat_raster, y = sp.polygons), "STFDF")
return(dat_stfdf)
}
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
rm(list=ls())
## commit label
commit.label <- 'modified STFDF.crop in Aux2Diss'
## Gitlab repository
username   <- "Arturo.Torres"
password   <- "sehajsamadhi1A"
##---------------------------------------------------------------------
## user's configuration (III)
##---------------------------------------------------------------------
## working directory
wdir <-  "~/Documents/02_working/3-Production/05_IV-Year/05_models/01_stUPscales/stUPscales/"
## commit label
commit.label <- 'modified STFDF.crop in Aux2Diss'
## Gitlab repository
username   <- "Arturo.Torres"
password   <- "sehajsamadhi1A"
repository <- "git.list.lu/geocomputation/quics/stUPscales.git"
credential <- paste0("https://", username, ":", password, "@", repository)
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
## find and write big files in .gitignore
system("find . -size +50M | cat >> .gitignore")
## to stage files
system("git add .")
## to commit changes with label
system(paste0("git commit -a -m '", commit.label, "'"))
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
##---------------------------------------------------------------------
## configuring remote.origin.url for Github repository and pushing
##---------------------------------------------------------------------
system(paste0("git config remote.origin.url ", credential))
system(paste0("git push ", credential, " master"))
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
detach("package:stUPscales", unload=TRUE)
library("stUPscales", lib.loc="/usr/local/lib/R/site-library")
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## commit label
commit.label <- 'modified STFDF.crop index dependency in Aux2Diss'
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
## find and write big files in .gitignore
system("find . -size +50M | cat >> .gitignore")
## to stage files
system("git add .")
## to commit changes with label
system(paste0("git commit -a -m '", commit.label, "'"))
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
##---------------------------------------------------------------------
## configuring remote.origin.url for Github repository and pushing
##---------------------------------------------------------------------
system(paste0("git config remote.origin.url ", credential))
system(paste0("git push ", credential, " master"))
detach("package:stUPscales", unload=TRUE)
library("stUPscales", lib.loc="/usr/local/lib/R/site-library")
library(stUPscales)
data("HS_RW20111216_stfdf")
data("Goe_catchment")
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
## commit label
commit.label <- 'modified STFDF.crop crop dependency in Aux2Diss'
##---------------------------------------------------------------------
## commit changes locally
##---------------------------------------------------------------------
## change to working directory
setwd(wdir)
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
## find and write big files in .gitignore
system("find . -size +50M | cat >> .gitignore")
## to stage files
system("git add .")
## to commit changes with label
system(paste0("git commit -a -m '", commit.label, "'"))
## to see status of files
system("git status")
## to look previous status of commmits
system("git log")
##---------------------------------------------------------------------
## configuring remote.origin.url for Github repository and pushing
##---------------------------------------------------------------------
system(paste0("git config remote.origin.url ", credential))
system(paste0("git push ", credential, " master"))
detach("package:stUPscales", unload=TRUE)
library(stUPscales)
data("HS_RW20111216_stfdf")
data("Goe_catchment")
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = Goe_catchment)
sp <- spTransform(Goe_catchment, CRSobj = HS_RW20111216_stfdf@sp@proj4string)
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = sp)
stplot(HS_RW20111216_stfdf, color.key = FALSE,
scales=list(draw=TRUE),
sp.layout=list(sp.polygons=(list(sp , col = "red",
lwd = 1, first = FALSE))))
library(spacetime)
stplot(HS_RW20111216_stfdf, color.key = FALSE,
scales=list(draw=TRUE),
sp.layout=list(sp.polygons=(list(sp , col = "red",
lwd = 1, first = FALSE))))
stplot(stfdf_crop, color.key = FALSE,
scales=list(draw=TRUE),
sp.layout=list(sp.polygons=(list(sp , col = "red",
lwd = 1, first = FALSE))))
plot(sp)
sp <- Bbox.offset(bbox = sp@bbox, offset = 1)
sp <- spTransform(Goe_catchment, CRSobj = HS_RW20111216_stfdf@sp@proj4string)
sp.offset <- Bbox.offset(bbox = sp@bbox, offset = 1)
sp.offset <- Bbox.offset(bbox = sp@bbox, offset = 1, sp.proj4string = HS_RW20111216_stfdf@sp@proj4string)
sp <- spTransform(Goe_catchment, CRSobj = HS_RW20111216_stfdf@sp@proj4string)
sp.offset <- Bbox.offset(bbox = sp@bbox, offset = 1, sp.proj4string = HS_RW20111216_stfdf@sp@proj4string)
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = sp.offset)
stplot(stfdf_crop, color.key = FALSE,
scales=list(draw=TRUE),
sp.layout=list(sp.polygons=(list(sp , col = "red",
lwd = 1, first = FALSE))))
stfdf_crop <- STFDF.crop(stfdf = HS_RW20111216_stfdf, sp.polygons = sp.offset)
stplot(stfdf_crop, color.key = FALSE,
scales=list(draw=TRUE),
sp.layout=list(sp.polygons=(list(sp , col = "red",
lwd = 1, first = FALSE))))
warnings()
