grid_cell_size           <- 0.20 # kilometres
grid_time_step           <- 10  # minutes
cores                    <- 5
file_prefix              <- "rain_a2pST_goe"
(timming.ini <- Sys.time())
#' data preparation
#' --------------------------------------------------------------------------------------------------
#+ data_preparation, echo=TRUE, eval=TRUE, include=TRUE
load("data_hsure.RData")
data("HS_RW20111216_stfdf")
data_stfdf <- HS_RW20111216_stfdf[,1:6,1]
rm(HS_RW20111216_stfdf)
# Plotting input data
palette <- colorRampPalette(c("gray95", "mediumaquamarine", "skyblue2",
"dodgerblue3", "blue4"))(90) # RColorBrewer
# pdf(width = 16, height = 22, file = "input_data.pdf")
stplot(data_stfdf, color.key = FALSE,
scales=list(draw=TRUE), par.strip.text=list(cex=0.75),
col.regions=palette, main = "a2pST_lisbon_metropolPlus50km_data_cell18x28km")
# dev.off()
# Plotting variogram
t(data.frame(data_hsure$vgm))
plot(data_hsure$empVgm, wireframe = TRUE,
scales=list(arrows = FALSE), col = palette, xlab = "distance (m)",
main = "Empirical semivariogram")
plot(data_hsure$empVgm, list(data_hsure$vgm), all = TRUE, wireframe = TRUE,
scales=list(arrows = FALSE), col = palette, xlab = "distance (m)",
main = "Model semivariogram")
plot(data_hsure$empVgm, list(data_hsure$vgm), all = TRUE, wireframe = TRUE, diff = TRUE,
scales=list(arrows = FALSE), col = palette, xlab = "distance (m)",
main = "Empirical and model semivariogram difference")
# Create grid
polygons_metres <- spTransform(data_hsure$polygons_goe, data_stfdf@sp@proj4string)
(bbox <- polygons_metres@bbox)
(xrange <- bbox[1,2] - bbox[1,1])
(yrange <- bbox[2,2] - bbox[2,1])
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
spplot(grid, col.regions='transparent',
sp.layout=list(list(polygons_metres)),
scales=list(draw=TRUE))
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
str(grid_split[[2]])
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1 <- length(do.call(rbind, plotOrder1))
plotOrder1_new <- matrix(1:plotOrder1, nrow = plotOrder1/length(grid_split))
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
plotOrder2 <- lapply(grid_split, function(x) x@plotOrder)
plotOrder2 <- length(do.call(rbind, plotOrder2))
plotOrder2_new <- matrix(1:plotOrder2, nrow = plotOrder2/length(grid_split))
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- plotOrder2_new[,x]
# }
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[cores]], axes=TRUE)
# # create target grids splitted as STF objects
time_grid <- seq.POSIXt(from = as.POSIXct(index(data_stfdf@time[1])), by = 60*grid_time_step,
to = as.POSIXct(index(data_stfdf@time[length(data_stfdf@time)])))
target_grid_split <- lapply(grid_split, function(x) STF(x, time_grid))
length(unique(target_grid_split[[4]]@sp@polygons))
length(target_grid_split[[4]]@sp@polygons)
length(unique(target_grid_split[[5]]@sp@polygons))
length(target_grid_split[[5]]@sp@polygons)
cores
str(grid_split[[5]])
str(grid_split[[5]]@polygons[[1]])
str(grid_split[[5]]@polygons[[2]])
str(grid_split[[5]]@polygons[[3]])
str(grid_split[[5]]@polygons[[4]])
str(grid_split[[5]]@polygons[[5]])
str(grid_split[[5]]@polygons[[6]])
sp::plot(grid_split[[cores]]@polygons[[5]], axes=TRUE)
plot(grid_split[[cores]]@polygons[[5]], axes=TRUE)
sp::spplot(grid_split[[cores]]@polygons[[5]], axes=TRUE)
sp::plot(grid_split[[cores]]@polygons[[5]], axes=TRUE)
sp::plot(grid_split[[cores]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
sp::plot(grid_split[[4]], axes=TRUE)
sp::plot(grid_split[[3]], axes=TRUE)
sp::plot(grid_split[[2]], axes=TRUE)
sp::plot(grid_split[[1]], axes=TRUE)
plotOrder2 <- lapply(grid_split, function(x) x@plotOrder)
plotOrder2
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- plotOrder2_new[,x]
# }
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
sp::plot(grid_split$5, axes=TRUE)
sp::plot(grid_split, axes=TRUE)
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1 <- length(do.call(rbind, plotOrder1))
plotOrder1_new <- matrix(1:plotOrder1, nrow = plotOrder1/length(grid_split))
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- plotOrder2_new[,x]
# }
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
str(grid_split[[2]])
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1 <- length(do.call(rbind, plotOrder1))
plotOrder1_new <- matrix(1:plotOrder1, nrow = plotOrder1/length(grid_split))
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
plotOrder2 <- lapply(grid_split, function(x) x@plotOrder)
plotOrder2
plotOrder2 <- lapply(grid_split, function(x) x@plotOrder)
plotOrder2 <- length(do.call(rbind, plotOrder2))
plotOrder2_new <- matrix(1:plotOrder2, nrow = plotOrder2/length(grid_split))
x <- 1; i <- 1
grid_split[[x]]@plotOrder
plotOrder2_new[,x]
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- plotOrder2_new[,x]
# }
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
grid_split
str(grid_split[[1]])
plotOrder2 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder2))
plotOrder2 <- lapply(grid_split, function(x) x@plotOrder)
plotOrder2
plotOrder2 <- length(do.call(rbind, plotOrder2))
plotOrder2_new <- matrix(1:plotOrder2, nrow = plotOrder2/length(grid_split))
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- plotOrder2_new[,x]
# }
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
plotOrder2 <- lapply(grid_split, function(x) x@plotOrder)
plotOrder2
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1 <- length(do.call(rbind, plotOrder1))
plotOrder1_new <- matrix(1:plotOrder1, nrow = plotOrder1/length(grid_split))
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
plotOrder1
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1
plotOrder1[[1]]
plotOrder1[[3]]
plotOrder2[[3]]
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- plotOrder1_new[,x]
# }
grid_split[[x]]
})
plotOrder1[[3]]
plotOrder2[[3]]
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[5]], axes=TRUE)
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[2]], axes=TRUE)
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- as.vector(plotOrder1_new[,x])
# }
grid_split[[x]]
})
plotOrder1[[3]]
plotOrder2[[3]]
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[2]], axes=TRUE)
as.vector(plotOrder1_new[,x])
plotOrder1_new[,x]
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- as.vector(plotOrder1_new[,x])
# }
grid_split[[x]]
})
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
spplot(grid, col.regions='transparent',
sp.layout=list(list(polygons_metres)),
scales=list(draw=TRUE))
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
str(grid_split[[2]])
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
str(grid_split[[2]])
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- as.vector(plotOrder1_new[,x])
# }
grid_split[[x]]
})
str(grid_split[[2]])
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- as.vector(plotOrder1_new[,1])
# }
grid_split[[x]]
})
plotOrder1[[3]]
plotOrder2[[3]]
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[2]], axes=TRUE)
length(unique(target_grid_split[[5]]@sp@polygons))
length(target_grid_split[[5]]@sp@polygons)
row.names(target_grid_split[[5]]@sp@polygons)
row.names(target_grid_split[[5]]@sp
)
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@sp@polygons)){
grid_split[[x]]@sp@polygons[[i]]@ID <- as.character(plotOrder1_new[i,x])
}
a2pST[[x]]
})
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@ID <- as.character(plotOrder1_new[i,x])
}
a2pST[[x]]
})
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@ID <- as.character(plotOrder1_new[i,x])
}
grid_split[[x]]
})
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
str(grid_split[[2]])
plotOrder1 <- lapply(grid_split, function(x) lapply(x@polygons, function(y) y@plotOrder))
plotOrder1 <- length(do.call(rbind, plotOrder1))
plotOrder1_new <- matrix(1:plotOrder1, nrow = plotOrder1/length(grid_split))
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@ID <- as.character(plotOrder1_new[i,x])
}
grid_split[[x]]
})
str(grid_split[[2]])
# x <- 1; i <- 1
grid_split <- lapply(1:length(grid_split), function(x){
for (i in 1:length(grid_split[[x]]@polygons)){
grid_split[[x]]@polygons[[i]]@plotOrder <- plotOrder1_new[i,x]
}
grid_split[[x]]
})
# x <- 1
grid_split <- lapply(1:length(grid_split), function(x){
# for (i in 1:length(grid_split[[x]]@plotOrder)){
grid_split[[x]]@plotOrder <- as.vector(plotOrder1_new[,1])
# }
grid_split[[x]]
})
sp::plot(grid_split[[1]], axes=TRUE)
sp::plot(grid_split[[2]], axes=TRUE)
unique(row.names(target_grid_split[[5]]@sp@polygons)))
row.names(target_grid_split[[5]]@sp@polygons))
row.names(target_grid_split[[5]]@sp)
row.names(target_grid_split[[5]]@sp)
row.names(grid_split[[5]]@sp)
row.names(grid_split[[5]])
plotOrder2 <- lapply(target_grid_split, function(x) lapply(x@sp@polygons, function(y) y@plotOrder))
plotOrder2
plotOrder2 <- lapply(target_grid_split, function(x) lapply(x@sp@polygons, function(y) y@ID))
plotOrder2
plotOrder2 <- lapply(target_grid_split, function(x) lapply(x@sp@polygons, function(y) y@ID))
target_grid_split <- lapply(1:length(target_grid_split), function(x){
for (i in 1:length(target_grid_split[[x]]@sp@polygons)){
target_grid_split[[x]]@sp@polygons[[i]]@ID <- as.character(plotOrder1_new[i,x])
}
grid_split[[x]]
})
lapply(target_grid_split, function(x) lapply(x@sp@polygons, function(y) y@ID))
plotOrder2 <- lapply(target_grid_split, function(x) lapply(x@sp@polygons, function(y) y@ID))
target_grid_split <- lapply(grid_split, function(x) STF(x, time_grid))
plotOrder2 <- lapply(target_grid_split, function(x) lapply(x@sp@polygons, function(y) y@ID))
plotOrder2
target_grid_split <- lapply(1:length(target_grid_split), function(x){
for (i in 1:length(target_grid_split[[x]]@sp@polygons)){
target_grid_split[[x]]@sp@polygons[[i]]@ID <- plotOrder1_new[i,x]
}
target_grid_split[[x]]
})
target_grid_split <- lapply(1:length(target_grid_split), function(x){
for (i in 1:length(target_grid_split[[x]]@sp@polygons)){
target_grid_split[[x]]@sp@polygons[[i]]@ID <- as.character(plotOrder1_new[i,x])
}
target_grid_split[[x]]
})
row.names(target_grid_split[[5]]@sp)
length(target_grid_split[[5]]@sp@polygons)
library(sp)
library(gstat)
data(meuse.grid)
gridded(meuse.grid) = ~x+y
ncell = 1000000
# sample 1000000 points over meuse.grid:
newd = spsample(meuse.grid, ncell, type="regular")
# or regular:
splt = rep(1:nclus, each = ceiling(ncell/nclus), length.out = ncell)
nclus = detectCores()
# either at random:
splt = sample(1:nclus, nrow(coordinates(newd)), replace = TRUE)
# or regular:
splt = rep(1:nclus, each = ceiling(ncell/nclus), length.out = ncell)
newdlst = lapply(as.list(1:nclus), function(w) newd[splt == w,])
# sample 1000000 points over meuse.grid:
newd = spsample(meuse.grid, ncell, type="regular")
ncell = dim(coordinates(newd))[1]
# or regular:
splt = rep(1:nclus, each = ceiling(ncell/nclus), length.out = ncell)
newdlst = lapply(as.list(1:nclus), function(w) newd[splt == w,])
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
spplot(grid, col.regions='transparent',
sp.layout=list(list(polygons_metres)),
scales=list(draw=TRUE))
grid <- as(grid, "SpatialPointsDataFrame")
grid <- as(grid, "SpatialPixelsDataFrame")
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
grid <- as(grid, "SpatialPixels")
grid <- as(grid, "SpatialGrid")
gridded(grid) <- TRUE
as(grid, "SpatialPointsDataFrame")
as(grid, "DataFrame")
as(grid, "data.frame")
grid <- as(grid, "data.frame")
grid
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
grid <- as(grid, "data.frame")
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
coordinates(grid)
gridded(coordinates(grid))=~x+y
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
xy <- coordinates(grid)
colnames(xy)
colnames(xy) <- c("x", "y")
gridded(xy)=~x+y
xy
data(meuse.grid)
gridded(t(xy))=~x+y
xy <- coordinates(grid)
colnames(xy) <- c("x", "y")
xy
xy <- data.frame(coordinates(grid))
colnames(xy) <- c("x", "y")
gridded(t(xy))=~x+y
xy <- data.frame(coordinates(grid))
colnames(xy) <- c("x", "y")
gridded(xy)=~x+y
grid <- data.frame(coordinates(grid))
colnames(grid) <- c("x", "y")
gridded(grid)=~x+y
plot(grid)
spplot(grid, col.regions='transparent',
sp.layout=list(list(polygons_metres)),
scales=list(draw=TRUE))
spplot(grid)
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
grid <- Create.grid(bbox = bbox, proj = data_stfdf@sp@proj4string, cell.size = grid_cell_size)
grid <- data.frame(coordinates(grid), id = 1:length(grid))
grid
colnames(grid) <- c("x", "y")
grid
colnames(grid) <- c("x", "y", "id")
grid
gridded(grid)=~x+y
spplot(grid)
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
str(grid_split[[2]])
# # create target grids splitted as STF objects
time_grid <- seq.POSIXt(from = as.POSIXct(index(data_stfdf@time[1])), by = 60*grid_time_step,
to = as.POSIXct(index(data_stfdf@time[length(data_stfdf@time)])))
target_grid_split <- lapply(grid_split, function(x) STF(x, time_grid))
grid <- spTransform(grid, data_stfdf@sp@proj4string)
grid@proj4string
grid@proj4string <- data_stfdf@sp@proj4string
grid <- spTransform(grid, data_stfdf@sp@proj4string)
spplot(grid)
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
setwd("~/Documents/02_working/3-Production/05_IV-Year/05_models/01_stUPscales/stUPscales/R")
Split.grid <- function(grid, n){
# coerce to SpatialPoints
spPoints  <- as(grid, "SpatialPoints")
# split in n tiles
nsplit <- lapply(1:n, function(i){
# n <- 68
ndata <- nrow(grid@data)
k     <- ndata/n
# spliting by polygons
# i <- 3
split_grid <- spPoints[(k*i - k + 1):(k*i)]
})
}
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
grid@proj4string <- data_stfdf@sp@proj4string
grid@proj4string
grid <- spTransform(grid, data_stfdf@sp@proj4string)
grid
spplot(grid,scales=list(draw=TRUE))
# Split grid
grid_split <- Split.grid(grid = grid, n = cores)
# # create target grids splitted as STF objects
time_grid <- seq.POSIXt(from = as.POSIXct(index(data_stfdf@time[1])), by = 60*grid_time_step,
to = as.POSIXct(index(data_stfdf@time[length(data_stfdf@time)])))
target_grid_split <- lapply(grid_split, function(x) STF(x, time_grid))
# verifying CRS values
data_stfdf@sp@proj4string
target_grid_split[[1]]@sp@proj4string
# # uncomment and modify next lines if avoiding zero values in psill model is required
data_hsure$vgm$space$psill[1]  <- 0.015
data_hsure$vgm$time$psill[1]   <- 0.015
data_hsure$vgm$joint$psill[1]  <- 0.015
data_hsure$vgm$joint$psill[2]  <- 0.015
cl <- makeCluster(cores)
registerDoParallel(cl, cores=cores)
a2pST <- krigeST.parallel(cluster = cl,
cores = cores,
data_stfdf = data_stfdf,
data_formula = raa01.rw_10000.1112160050.dwd...bin ~ 1,
data_target = target_grid_split,
vgm_model = data_hsure$vgm,  # point variogram
p_nmax = 6,
p_bufferNmax = 1,
p_computeVar = FALSE,
p_verbose = TRUE,
p_modelList = vgmAreaST,
p_ndiscrSpace = 5
)
closeAllConnections()
stopCluster()
stopCluster(cl)
